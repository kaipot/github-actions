name: Build Go project

on:
  workflow_call:
    secrets:
      ssh-private-keys:
        required: false

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest
    env:
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      ssh-private-keys: ${{ secrets.ssh-private-keys }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check for proto files
      run: |
        if find . -name "*.proto" | grep -q .; then
          echo "proto=true" >> $GITHUB_ENV
          echo ":eyes: Proto files found" >> $GITHUB_STEP_SUMMARY
        else
          echo "proto=false" >> $GITHUB_ENV
          echo ":no_entry_sign: No proto files found" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.x'

    - name: Set up access to private repositories
      if: ${{ env.ssh-private-keys != '' }}
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ env.ssh-private-keys }}

    - name: Go mod tidy check
      run: |
        MOD_DIFF=0
        while read F; do
          cd "$(dirname "$F")" &>/dev/null
          pwd
          if ! go mod tidy -diff; then
            echo "::error file=$F::changes needed"
            MOD_DIFF=1
          fi
          cd - &>/dev/null
        done <<< "$(find . -type f -name go.mod)"
        [ "$MOD_DIFF" -eq 1 ] && exit 1
        echo ":white_check_mark: Go mod tidy check OK" >> $GITHUB_STEP_SUMMARY

    - name: Set up protoc
      if: ${{ env.proto == 'true' }}
      working-directory: /tmp
      run: |
        # Fetch protobuf release info.
        RELEASE="$(curl -s -m10 --connect-timeout 5 \
          https://api.github.com/repos/protocolbuffers/protobuf/releases/latest)"
        ASSETS="$(jq '.assets | map(select(.browser_download_url | test("protoc.*linux-x86_64")))' <<< "$RELEASE")"
        [ "$(jq length <<< "$ASSETS")" -eq 1 ] || exit 1
        # Download and unarchive the release.
        DOWNLOAD_URL="$(jq -r ".[0].browser_download_url" <<< "$ASSETS")"
        wget -nv "$DOWNLOAD_URL"
        echo ":arrow_down: Downloaded [$(basename "$DOWNLOAD_URL")]($DOWNLOAD_URL)" >> $GITHUB_STEP_SUMMARY
        if grep -q '\.zip$' <<< "$DOWNLOAD_URL"; then
          unzip "$(basename "$DOWNLOAD_URL")"
        elif grep -q '\.tar.gz$' <<< "$DOWNLOAD_URL"; then
          tar -xvf "$(basename "$DOWNLOAD_URL")"
        else
          echo "::error file=$F::unknown file format for $(basename "$DOWNLOAD_URL")"
          exit 1
        fi
        # Move binary and add to path, assuming archive contains file "bin/protoc".
        BIN_DIR="$HOME/.local/bin"
        mkdir -p "$BIN_DIR"
        mv bin/protoc "$BIN_DIR"
        echo "$BIN_DIR" >> $GITHUB_PATH
        # Get protoc plugins.
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        echo ":arrow_down: Installed protoc-gen-go" >> $GITHUB_STEP_SUMMARY
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        echo ":arrow_down: Installed protoc-gen-go-grpc" >> $GITHUB_STEP_SUMMARY
        echo ":arrow_down: Downloaded [$(basename "$DOWNLOAD_URL")]($DOWNLOAD_URL)" >> $GITHUB_STEP_SUMMARY
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        # Print version information.
        for BIN in protoc protoc-gen-go protoc-gen-go-grpc; do
          if ! which "$BIN" 2>/dev/null; then
            echo "::error ::$BIN not found"
            exit 1
          fi
          echo ":information_source: $BIN version $($BIN --version | grep -o '[0-9.]\+$')" >> $GITHUB_STEP_SUMMARY
        done

    - name: Compile proto files
      if: ${{ env.proto == 'true' }}
      run: |
        find . -name "*.proto" -exec \
          protoc --go_out=. --go_opt=paths=source_relative \
          --go-grpc_out=. --go-grpc_opt=paths=source_relative {} \;
        echo ":white_check_mark: Compiled proto files" >> $GITHUB_STEP_SUMMARY

    - name: Build
      run: |
        go build
        echo ":white_check_mark: Go package compiled" >> $GITHUB_STEP_SUMMARY

    - name: Test
      run: |
        go test -v ./...
        echo ":white_check_mark: Go test completed" >> $GITHUB_STEP_SUMMARY

